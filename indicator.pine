// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© adobrusky

//@version=5
indicator("Buy/Sell Volume Bars", format=format.volume)

// User inputs
showMetric = input.bool(true, "Show Volume Metric")
metricDisplay = input.string("Line", title = "Volume Metric Display", options = ['Line', 'Bars'])
volumeMetric = input.string("Median", title = "Volume Metric", options = ['SMA', 'Median'])
volumeMetricLength = input.int(50, minval=10, maxval=500,title="Volume Metric Length")
volumeMedianSessionData = input.string("Extended", title = "Volume Median Session Data", options = ['Regular', 'Extended'])
showRegularMedian = input.timeframe("30", title = "Only Show Regular Session Volume Median Higher Than Timeframe")
futuresRegularSession = input("0830-1500:23456", title = "Futures Regular Session")
bullColor = input(color.rgb(8, 153, 129), title="Buy Volume Color")
bearColor = input(color.rgb(242, 54, 69), title="Sell Volume Color")
metricColor = input(color.rgb(83, 83, 83, 30), title="Volume Metric Bars Color")
averageLineColor = input(color.rgb(243, 152, 15), title="Volume Metric Line Color")

// Volume calculations
gapUp = close[1] < low ? low - close[1] : 0
gapDown = close[1] > high ? close[1] - high : 0
buyVolume = volume * (close - (low - gapUp)) / ((high + gapDown) - (low - gapUp))
sellVolume = volume
usingSMA = volumeMetric == "SMA"
usingLine = metricDisplay == "Line"
volumeSMA = usingSMA ? ta.sma(volume, volumeMetricLength) : 0
medianVolume = 0.0
if not na(volume)
    // Volume median calculation
    if showMetric and not usingSMA
        var float[] regularMarketVolume = array.new_float(volumeMetricLength)
        var float[] extendedMarketVolume = array.new_float(volumeMetricLength)

        var bool isFuture = str.endswith(syminfo.ticker, "!") and syminfo.type == "futures"
        bool isFutureRegularSession = not na(time(timeframe.period, futuresRegularSession))
        var bool useRegular = (timeframe.in_seconds(showRegularMedian) / 60) >= (timeframe.in_seconds() / 60)
        if volumeMedianSessionData == "Extended" and (session.ispremarket or session.ispostmarket or (isFuture and not isFutureRegularSession)) and useRegular
            if extendedMarketVolume.size() == volumeMetricLength
                extendedMarketVolume.shift()
            array.push(extendedMarketVolume, volume)
        else if (session.ismarket and not isFuture) or (isFuture and (isFutureRegularSession or timeframe.isdaily))
            if regularMarketVolume.size() == volumeMetricLength
                regularMarketVolume.shift()
            array.push(regularMarketVolume, volume)

        if volumeMedianSessionData == "Regular"
            medianVolume := array.median(regularMarketVolume)
        else if volumeMedianSessionData == "Extended"
            if (session.ismarket and not isFuture) or (isFuture and isFutureRegularSession) or not useRegular
                medianVolume := array.median(regularMarketVolume)
            else
                medianVolume := array.median(extendedMarketVolume)
else
    buyVolume := na
    sellVolume := na
    showMetric := false

plot(showMetric and not usingLine ? usingSMA ? volumeSMA : medianVolume : na, style=plot.style_columns, color=metricColor, title="Volume Metric as Bars")
plot(sellVolume, style=plot.style_columns, color=bearColor, title="Sell Volume")
plot(buyVolume, style=plot.style_columns, color=bullColor, title="Buy Volume")
plot(showMetric and usingLine ? usingSMA ? volumeSMA : medianVolume : na, style=plot.style_line, color=averageLineColor, title="Volume Metric as Line")