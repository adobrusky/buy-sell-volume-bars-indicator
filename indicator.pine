// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=6
indicator("Buy/Sell Pressure Volume Bars", format=format.volume)

// User inputs
showMetric = input.bool(true, "Show Volume Metric", tooltip="Toggle to show or hide the volume metric.")
metricDisplay = input.string("Line", title="Volume Metric Display", options=['Line', 'Bars'], tooltip="Choose how the volume metric is displayed: as a line or as bars.")
volumeMetric = input.string("Baseline", title="Volume Metric", options=['SMA', 'Baseline'], tooltip="Select the type of volume metric: Simple Moving Average (SMA) or the proprietary Baseline.")
volumeMetricLength = input.int(50, minval=10, maxval=500, title="Volume Metric Length", tooltip="Set the length for the volume metric calculation.")
volumeMedianSessionData = input.string("Extended", title="Volume Baseline Session Data", options=['Regular', 'Extended'], tooltip="Choose the session data type for calculating the volume baseline: Regular or Extended.")
showRegularMedian = input.timeframe("30", title="Only Show Regular Session Data Above", tooltip="The timeframe above which only regular session data is displayed in the Baseline, even if extended session data is selected.")
bullColor = input(color.rgb(8, 153, 129), title="Buy Volume Color")
bearColor = input(color.rgb(242, 54, 69), title="Sell Volume Color")
metricColor = input(color.rgb(83, 83, 83, 30), title="Volume Metric Bars Color")
averageLineColor = input(color.rgb(243, 152, 15), title="Volume Metric Line Color")

// Volume calculations
gapUp = close[1] < low ? low - close[1] : 0
gapDown = close[1] > high ? close[1] - high : 0
buyVolume = volume * (close - (low - gapUp)) / ((high + gapDown) - (low - gapUp))
sellVolume = volume
usingSMA = volumeMetric == "SMA"
usingLine = metricDisplay == "Line"
volumeSMA = usingSMA ? ta.sma(volume, volumeMetricLength) : 0
medianVolume = 0.0

if not na(volume)
    // Volume median calculation
    if showMetric and not usingSMA
        var float[] regularMarketVolume = array.new_float(volumeMetricLength)
        var float[] extendedMarketVolume = array.new_float(volumeMetricLength)

        isRTH = time(timeframe.period, "0930-1600:23456", "America/New_York") != 0 or timeframe.isdwm
        var bool useRegular = (timeframe.in_seconds(showRegularMedian) / 60) >= (timeframe.in_seconds() / 60)
        
        if volumeMedianSessionData == "Extended" and not isRTH and useRegular
            if extendedMarketVolume.size() == volumeMetricLength
                extendedMarketVolume.shift()
            array.push(extendedMarketVolume, volume)
        else if isRTH
            if regularMarketVolume.size() == volumeMetricLength
                regularMarketVolume.shift()
            array.push(regularMarketVolume, volume)

        if volumeMedianSessionData == "Regular"
            medianVolume := array.median(regularMarketVolume)
        else if volumeMedianSessionData == "Extended"
            if isRTH or not useRegular
                medianVolume := array.median(regularMarketVolume)
            else
                medianVolume := array.median(extendedMarketVolume)
else
    buyVolume := na
    sellVolume := na
    showMetric := false

// Calculate the volume metric based on user selection
volumeMetricValue = usingSMA ? volumeSMA : medianVolume

// Plot volume metric
plot(showMetric and not usingLine ? volumeMetricValue : na, style=plot.style_columns, color=metricColor, title="Volume Metric as Bars")

// Plot buy and sell volumes
plot(sellVolume, style=plot.style_columns, color=bearColor, title="Sell Volume")
plot(buyVolume, style=plot.style_columns, color=bullColor, title="Buy Volume")

// Plot volume metric line
plot(showMetric and usingLine ? volumeMetricValue : na, style=plot.style_line, color=averageLineColor, title="Volume Metric as Line")